use("db_campus_alquiler");

db.createCollection("sucursal", {
  capped: true,
  size: 640,
  // max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["_id", "Nombre", "Direccion", "Telefono"],
      properties: {
        _id: {
          bsonType: "int",
          description: "ID de la sucursal",
        },
        Nombre: {
          bsonType: "string",
          description: "Nombre de la sucursal",
        },
        Direccion: {
          bsonType: "string",
          description: "Dirección de la sucursal",
        },
        Telefono: {
          bsonType: "int",
          description: "Número de teléfono de la sucursal",
        },
      },
    },
  },
});

db.sucursal.insertMany([
  {
    _id: 1,
    Nombre: "Zona Franca",
    Direccion: "Florida",
    Telefono: 123456789,
  },
  {
    _id: 2,
    Nombre: "Centro Comercial Metropolis",
    Direccion: "Avenida Principal, Ciudad",
    Telefono: 987654321,
  },
  {
    _id: 3,
    Nombre: "Mall Plaza",
    Direccion: "Calle Comercial, Pueblo",
    Telefono: 246813579,
  },
  {
    _id: 4,
    Nombre: "Mega Shopping Center",
    Direccion: "Avenida Central, Ciudad",
    Telefono: 135792468,
  },
  {
    _id: 5,
    Nombre: "Galería del Este",
    Direccion: "Calle Principal, Pueblo",
    Telefono: 369852147,
  },
]);

db.createCollection("sucursal_automovil", {
  capped: true,
  size: 800,
  // max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["_id", "ID_Sucursal", "ID_Automovil", "Cantidad_Disponible"],
      properties: {
        _id: {
          bsonType: "int",
          description: "ID de la sucursal_automovil",
        },
        ID_Sucursal: {
          bsonType: "int",
          description: "ID de la sucursal",
        },
        ID_Automovil: {
          bsonType: "int",
          description: "ID del automóvil",
        },
        Cantidad_Disponible: {
          bsonType: "int",
          description: "Cantidad disponible del automóvil en la sucursal",
        },
      },
    },
  },
});

db.sucursal_automovil.insertMany([
  {
    _id: 1,
    ID_Sucursal: 1,
    ID_Automovil: 1,
    Cantidad_Disponible: 5,
  },
  {
    _id: 2,
    ID_Sucursal: 1,
    ID_Automovil: 2,
    Cantidad_Disponible: 3,
  },
  {
    _id: 3,
    ID_Sucursal: 2,
    ID_Automovil: 3,
    Cantidad_Disponible: 2,
  },
  {
    _id: 4,
    ID_Sucursal: 1,
    ID_Automovil: 4,
    Cantidad_Disponible: 7,
  },
  {
    _id: 5,
    ID_Sucursal: 3,
    ID_Automovil: 5,
    Cantidad_Disponible: 0,
  },
]);

db.createCollection("automovil", {
  capped: true,
  size: 810,
  // max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "Marca",
        "Modelo",
        "Anio",
        "Tipo",
        "Capacidad",
        "Precio_diario",
      ],
      properties: {
        _id: {
          bsonType: "int",
          description: "ID del automóvil",
        },
        Marca: {
          bsonType: "string",
          description: "Marca del automóvil",
        },
        Modelo: {
          bsonType: "string",
          description: "Modelo del automóvil",
        },
        Anio: {
          bsonType: "int",
          description: "Año del automóvil",
        },
        Tipo: {
          bsonType: "string",
          description: "Tipo del automóvil",
        },
        Capacidad: {
          bsonType: "int",
          description: "Capacidad del automóvil",
        },
        Precio_Diario: {
          bsonType: "int",
          description: "Precio diario del automóvil",
        },
      },
    },
  },
});

db.automovil.insertMany([
  {
    _id: 1,
    Marca: "Mazda",
    Modelo: "323NX",
    Anio: 1995,
    Tipo: "Sedán",
    Capacidad: 5,
    Precio_diario: 40000,
  },
  {
    _id: 2,
    Marca: "Toyota",
    Modelo: "Corolla",
    Anio: 2010,
    Tipo: "Sedán",
    Capacidad: 5,
    Precio_diario: 45000,
  },
  {
    _id: 3,
    Marca: "Honda",
    Modelo: "Civic",
    Anio: 2015,
    Tipo: "Sedán",
    Capacidad: 5,
    Precio_diario: 50000,
  },
  {
    _id: 4,
    Marca: "Chevrolet",
    Modelo: "Spark",
    Anio: 2018,
    Tipo: "Compacto",
    Capacidad: 4,
    Precio_diario: 35000,
  },
  {
    _id: 5,
    Marca: "Ford",
    Modelo: "Focus",
    Anio: 2020,
    Tipo: "Hatchback",
    Capacidad: 5,
    Precio_diario: 48000,
  },
]);

db.createCollection("cliente", {
  capped: true,
  size: 2000,
  // max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "Nombre",
        "Apellido",
        "DNI",
        "Direccion",
        "Telefono",
        "Email",
      ],
      properties: {
        _id: {
          bsonType: "int",
          description: "ID del cliente",
        },
        Nombre: {
          bsonType: "string",
          description: "Nombre del cliente",
        },
        Apellido: {
          bsonType: "string",
          description: "Apellido del cliente",
        },
        DNI: {
          bsonType: "int",
          description: "DNI del cliente",
        },
        Direccion: {
          bsonType: "string",
          description: "Dirección del cliente",
        },
        Telefono: {
          bsonType: "double",
          description: "Número de teléfono del cliente",
        },
        Email: {
          bsonType: "string",
          description: "Correo electrónico del cliente",
        },
      },
    },
  },
});

db.cliente.insertMany([
  {
    _id: 1,
    Nombre: "Emily",
    Apellido: "Nieves",
    DNI: 123456789,
    Direccion: "Calle 10",
    Telefono: 3166666555,
    Email: "emily@gmail.com",
  },
  {
    _id: 2,
    Nombre: "Carlos",
    Apellido: "González",
    DNI: 987654321,
    Direccion: "Avenida 5",
    Telefono: 3177777444,
    Email: "carlos@example.com",
  },
  {
    _id: 3,
    Nombre: "Ana",
    Apellido: "Martínez",
    DNI: 456789123,
    Direccion: "Calle 20",
    Telefono: 3155555666,
    Email: "ana@hotmail.com",
  },
  {
    _id: 4,
    Nombre: "Juan",
    Apellido: "López",
    DNI: 789123456,
    Direccion: "Plaza Mayor",
    Telefono: 3144444777,
    Email: "juan@example.com",
  },
  {
    _id: 5,
    Nombre: "María",
    Apellido: "Ramírez",
    DNI: 654321987,
    Direccion: "Avenida Principal",
    Telefono: 3188888999,
    Email: "maria@gmail.com",
  },
]);
db.createCollection("empleado", {
  capped: true,
  size: 1035,
  // max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "Nombre",
        "Apellido",
        "DNI",
        "Direccion",
        "Telefono",
        "Cargo",
      ],
      properties: {
        _id: {
          bsonType: "int",
          description: "ID del empleado",
        },
        Nombre: {
          bsonType: "string",
          description: "Nombre del empleado",
        },
        Apellido: {
          bsonType: "string",
          description: "Apellido del empleado",
        },
        DNI: {
          bsonType: "int",
          description: "DNI del empleado",
        },
        Direccion: {
          bsonType: "string",
          description: "Dirección del empleado",
        },
        Telefono: {
          bsonType: "double",
          description: "Número de teléfono del empleado",
        },
        Cargo: {
          bsonType: "string",
          description: "Cargo del empleado",
        },
      },
    },
  },
});

db.empleado.insertMany([
  {
    _id: 1,
    Nombre: "Andrés",
    Apellido: "Elizalde",
    DNI: 56974210,
    Direccion: "Calle Principal",
    Telefono: 3188284099,
    Cargo: "Cajero",
  },
  {
    _id: 2,
    Nombre: "Gabriela",
    Apellido: "Soto",
    DNI: 80236987,
    Direccion: "Avenida Libertad",
    Telefono: 3154896231,
    Cargo: "Vendedor",
  },
  {
    _id: 3,
    Nombre: "Luis",
    Apellido: "García",
    DNI: 12457896,
    Direccion: "Calle 7",
    Telefono: 3125879632,
    Cargo: "Supervisor",
  },
  {
    _id: 4,
    Nombre: "Laura",
    Apellido: "Moreno",
    DNI: 98745632,
    Direccion: "Carrera 15",
    Telefono: 3147895632,
    Cargo: "Gerente",
  },
  {
    _id: 5,
    Nombre: "Jorge",
    Apellido: "Pérez",
    DNI: 36547821,
    Direccion: "Avenida Central",
    Telefono: 3112369875,
    Cargo: "Asistente Administrativo",
  },
]);

db.createCollection("reserva", {
  capped: true,
  size: 950,
  // max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "ID_Cliente",
        "ID_Automovil",
        "Fecha_Reserva",
        "Fecha_Inicio",
        "Fecha_Fin",
        "Estado",
      ],
      properties: {
        _id: {
          bsonType: "int",
          description: "ID de la reserva",
        },
        ID_Cliente: {
          bsonType: "int",
          description: "ID del cliente",
        },
        ID_Automovil: {
          bsonType: "int",
          description: "ID del automóvil",
        },
        Fecha_Reserva: {
          bsonType: "string",
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
          description: "Fecha de la reserva",
        },
        Fecha_Inicio: {
          bsonType: "string",
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
          description: "Fecha de inicio de la reserva",
        },
        Fecha_Fin: {
          bsonType: "string",
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
          description: "Fecha de fin de la reserva",
        },
        Estado: {
          bsonType: "string",
          description: "Estado de la reserva",
        },
      },
    },
  },
});

db.reserva.insertMany([
  {
    _id: 1,
    ID_Cliente: 1,
    ID_Automovil: 2,
    Fecha_Reserva: "2023-12-20",
    Fecha_Inicio: "2024-01-10",
    Fecha_Fin: "2024-01-12",
    Estado: "Confirmada",
  },
  {
    _id: 2,
    ID_Cliente: 2,
    ID_Automovil: 3,
    Fecha_Reserva: "2023-12-25",
    Fecha_Inicio: "2024-02-05",
    Fecha_Fin: "2024-02-10",
    Estado: "Confirmada",
  },
  {
    _id: 3,
    ID_Cliente: 1,
    ID_Automovil: 1,
    Fecha_Reserva: "2023-12-30",
    Fecha_Inicio: "2024-03-15",
    Fecha_Fin: "2024-03-20",
    Estado: "Pendiente",
  },
  {
    _id: 4,
    ID_Cliente: 3,
    ID_Automovil: 4,
    Fecha_Reserva: "2023-12-31",
    Fecha_Inicio: "2024-04-01",
    Fecha_Fin: "2024-04-05",
    Estado: "Cancelada",
  },
  {
    _id: 5,
    ID_Cliente: 2,
    ID_Automovil: 5,
    Fecha_Reserva: "2023-12-31",
    Fecha_Inicio: "2024-05-10",
    Fecha_Fin: "2024-05-15",
    Estado: "Confirmada",
  },
]);

db.createCollection("alquiler", {
  capped: true,
  size: 950,
  // max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "ID_Cliente",
        "ID_Automovil",
        "Fecha_Inicio",
        "Fecha_Fin",
        "Costo_Total",
        "Estado",
      ],
      properties: {
        _id: {
          bsonType: "int",
          description: "ID del alquiler",
        },
        ID_Cliente: {
          bsonType: "int",
          description: "ID del cliente",
        },
        ID_Automovil: {
          bsonType: "int",
          description: "ID del automóvil",
        },
        Fecha_Inicio: {
          bsonType: "string",
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
          description: "Fecha de inicio del alquiler",
        },
        Fecha_Fin: {
          bsonType: "string",
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
          description: "Fecha de fin del alquiler",
        },
        Costo_Total: {
          bsonType: "int",
          description: "Cocto total del alquiler",
        },
        Estado: {
          bsonType: "string",
          description: "Estado del alquiler",
        },
      },
    },
  },
});

db.alquiler.insertMany([
  {
    _id: 1,
    ID_Cliente: 2,
    ID_Automovil: 5,
    Fecha_Inicio: "2024-05-10",
    Fecha_Fin: "2024-05-15",
    Costo_Total: 250000,
    Estado: "Confirmada",
  },
  {
    _id: 2,
    ID_Cliente: 1,
    ID_Automovil: 4,
    Fecha_Inicio: "2024-02-05",
    Fecha_Fin: "2024-02-10",
    Costo_Total: 180000,
    Estado: "Confirmada",
  },
  {
    _id: 3,
    ID_Cliente: 3,
    ID_Automovil: 1,
    Fecha_Inicio: "2024-03-15",
    Fecha_Fin: "2024-03-20",
    Costo_Total: 120000,
    Estado: "Pendiente",
  },
  {
    _id: 4,
    ID_Cliente: 2,
    ID_Automovil: 2,
    Fecha_Inicio: "2024-04-01",
    Fecha_Fin: "2024-04-05",
    Costo_Total: 90000,
    Estado: "Cancelada",
  },
  {
    _id: 5,
    ID_Cliente: 1,
    ID_Automovil: 3,
    Fecha_Inicio: "2024-05-10",
    Fecha_Fin: "2024-05-15",
    Costo_Total: 320000,
    Estado: "Confirmada",
  },
]);

db.createCollection("registro_devolucion", {
  capped: true,
  size: 1000,
  // max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "ID_Alquiler",
        "ID_Empleado",
        "Fecha_Devolucion",
        "Combustible_Devuelto",
        "Kilometraje_Devuelto",
        "Monto_Adicional",
      ],
      properties: {
        _id: {
          bsonType: "int",
          description: "ID del registro de devolucion",
        },
        ID_Alquiler: {
          bsonType: "int",
          description: "ID del alquiler",
        },
        ID_Empleado: {
          bsonType: "int",
          description: "ID del empleado",
        },
        Fecha_Devolucion: {
          bsonType: "string",
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
          description: "Fecha de devolucion",
        },
        Combustible_Devuelto: {
          bsonType: "number",
          pattern: "^[0-9]{5}.[0-9]{2}$",
          description:
            "Cantidad de combustible entregado el momento de la devolucion",
        },
        Kilometraje_Devuelto: {
          bsonType: "int",
          description: "Kilometraje registrado en la devolucion",
        },
        Monto_Adicional: {
          bsonType: "int",
          description: "Monto adicional del registrado de devolucion",
        },
      },
    },
  },
});
db.registro_devolucion.insertMany([
  {
    _id: 1,
    ID_Alquiler: 1,
    ID_Empleado: 2,
    Fecha_Devolucion: "2023-10-12",
    Combustible_Devuelto: 25,
    Kilometraje_Devuelto: 120000,
    Monto_Adicional: 98000,
  },
  {
    _id: 2,
    ID_Alquiler: 2,
    ID_Empleado: 1,
    Fecha_Devolucion: "2023-09-25",
    Combustible_Devuelto: 20,
    Kilometraje_Devuelto: 135000,
    Monto_Adicional: 75000,
  },
  {
    _id: 3,
    ID_Alquiler: 3,
    ID_Empleado: 3,
    Fecha_Devolucion: "2023-11-05",
    Combustible_Devuelto: 30,
    Kilometraje_Devuelto: 110000,
    Monto_Adicional: 60000,
  },
  {
    _id: 4,
    ID_Alquiler: 1,
    ID_Empleado: 2,
    Fecha_Devolucion: "2023-10-12",
    Combustible_Devuelto: 20,
    Kilometraje_Devuelto: 122000,
    Monto_Adicional: 89000,
  },
  {
    _id: 5,
    ID_Alquiler: 4,
    ID_Empleado: 1,
    Fecha_Devolucion: "2023-12-20",
    Combustible_Devuelto: 35,
    Kilometraje_Devuelto: 140000,
    Monto_Adicional: 55000,
  },
]);

db.createCollection("registro_entrega", {
  capped: true,
  size: 875,
  // max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "ID_Alquiler",
        "ID_Empleado",
        "Fecha_Entrega",
        "Combustible_Entregado",
        "Kilometraje_Entregado",
      ],
      properties: {
        _id: {
          bsonType: "int",
          description: "ID del registro de entrega",
        },
        ID_Alquiler: {
          bsonType: "int",
          description: "ID del alquiler",
        },
        ID_Empleado: {
          bsonType: "int",
          description: "ID del empleado",
        },
        Fecha_Entrega: {
          bsonType: "string",
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
          description: "Fecha de entrega",
        },
        Combustible_Entregado: {
          bsonType: "int",
          pattern: "^[0-9]{5}.[0-9]{2}$",
          description: "Cantidad de combustible entregado en litros",
        },
        Kilometraje_Entregado: {
          bsonType: "int",
          description: "Kilometraje registrado en la entrega",
        },
      },
    },
  },
});

db.registro_entrega.insertMany([
  {
    _id: 1,
    ID_Alquiler: 4,
    ID_Empleado: 1,
    Fecha_Entrega: "2023-12-20",
    Combustible_Entregado: 60,
    Kilometraje_Entregado: 10000,
  },
  {
    _id: 2,
    ID_Alquiler: 3,
    ID_Empleado: 2,
    Fecha_Entrega: "2023-11-05",
    Combustible_Entregado: 40,
    Kilometraje_Entregado: 8000,
  },
  {
    _id: 3,
    ID_Alquiler: 1,
    ID_Empleado: 3,
    Fecha_Entrega: "2023-10-12",
    Combustible_Entregado: 55,
    Kilometraje_Entregado: 9500,
  },
  {
    _id: 4,
    ID_Alquiler: 5,
    ID_Empleado: 1,
    Fecha_Entrega: "2023-12-31",
    Combustible_Entregado: 70,
    Kilometraje_Entregado: 11000,
  },
  {
    _id: 5,
    ID_Alquiler: 2,
    ID_Empleado: 2,
    Fecha_Entrega: "2023-09-25",
    Combustible_Entregado: 45,
    Kilometraje_Entregado: 8500,
  },
]);

/***************CONSULTASSSSSSSSSSSS */
//!Mostrar todos los clientes registrados en la base de datos.
// use("db_campus_alquiler");
db.cliente.find({});

//!Obtener todos los automóviles disponibles para alquiler
// use("db_campus_alquiler");
db.sucursal_automovil.find({ Cantidad_Disponible: { $gt: 0 } });

//!Listar todos los alquileres activos junto con los datos de los clientes relacionados
// use("db_campus_alquiler");
db.alquiler.aggregate([
  { $match: { Estado: "Confirmada" } },
  {
    $lookup: {
      from: "cliente",
      localField: "ID_Cliente", //id a comparar en la tabla alquiler
      foreignField: "_id", //id a comparar en la tabla cliente
      as: "cliente_info",
    },
  },
  {
    $unwind: "$cliente_info",
  },
  {
    $group: {
      _id: "$ID_Cliente",
      cliente_info: { $first: "$cliente_info" },
      alquileres: {
        $push: {
          ID_Alquiler: "$ID_Alquiler",
          Fecha_Inicio: "$Fecha_Inicio",
          Fecha_Fin: "$Fecha_Fin",
          Estado: "$Estado",
        },
      },
    },
  },
  {
    $project: {
      _id: 0,
      cliente_info: {
        Name: "$cliente_info.Nombre",
        Lastname: "$cliente_info.Apellido",
        Document: "$cliente_info.DNI",
      },
      alquileres: 1,
    },
  },
]);

//!Mostrar todas las reservas pendientes con los datos del cliente y el automóvil reservado.
// use("db_campus_alquiler");
db.reserva.aggregate([
  { $match: { Estado: "Pendiente" } },
  {
    $lookup: {
      from: "cliente",
      localField: "ID_Cliente", //campo en reserva
      foreignField: "_id", //campo en cliente
      as: "cliente_info",
    },
  },
  {
    $unwind: "$cliente_info",
  },
  {
    $lookup: {
      from: "automovil",
      localField: "ID_Automovil", //campo en reserva
      foreignField: "_id", //campo en automovil
      as: "vehiculo_info",
    },
  },
  {
    $unwind: "$vehiculo_info",
  },
  {
    $project: {
      _id: 0,
      Cliente: {
        Nombre: "$cliente_info.Nombre",
        Apellido: "$cliente_info.Apellido",
        DNI: "$cliente_info.DNI",
      },
      Reserva: {
        Fecha_Inicio: "$Fecha_Inicio",
        Fecha_Fin: "$Fecha_Fin",
        Estado: "$Estado",
      },
      Vehiculo: {
        Marca: "$vehiculo_info.Marca",
        Modelo: "$vehiculo_info.Modelo",
        Anio: "$vehiculo_info.Anio",
        Tipo: "$vehiculo_info.Tipo",
        Capacidad: "$vehiculo_info.Capacidad",
        Precio_diario: "$vehiculo_info.Precio_diario",
      },
    },
  },
  {
    $group: {
      _id: "$Cliente",
      reservas: {
        $push: "$Reserva",
      },
      vehiculos: {
        $push: "$Vehiculo",
      },
    },
  },
]);

//!Obtener los detalles del alquiler con el ID_Alquiler específico
// use("db_campus_alquiler");
db.alquiler.find({ _id: 1 });

//!Listar los empleados con el cargo de "Vendedor"
// use("db_campus_alquiler");
db.empleado.find({ Cargo: "Vendedor" });

//!Mostrar la cantidad total de automóviles disponibles en cada sucursal.
// use("db_campus_alquiler");
db.sucursal_automovil.aggregate([
  {
    $group: {
      _id: "$ID_Sucursal",
      Cantidad_Total_Disponible: { $sum: "$Cantidad_Disponible" },
    },
  },
  {
    $lookup: {
      from: "sucursal",
      localField: "_id",
      foreignField: "_id",
      as: "sucursal_info",
    },
  },
  {
    $unwind: "$sucursal_info",
  },
  {
    $project: {
      _id: 0,
      Sucursal: "$sucursal_info.Nombre",
      Cantidad_Total_Disponible: 1,
    },
  },
]);

//!Obtener el costo total de un alquiler específico.
// use("db_campus_alquiler");
db.alquiler.find(
  { _id: 1 },
  {
    Costo_Total: 1,
  }
);

//!Listar los clientes con el DNI específico.
// use("db_campus_alquiler");
db.cliente.find({ DNI: 654321987 });

//!Mostrar todos los automóviles con una capacidad mayor a 5 personas
// use("db_campus_alquiler");
db.automovil.find({ Capacidad: { $gte: 5 } });

//!Obtener los detalles del alquiler que tiene fecha de inicio en '2023-12-31'
// use("db_campus_alquiler");
db.alquiler.find({ Fecha_Reserva: "2023-12-31" });

//!Listar las reservas pendientes realizadas por un cliente específico.
// use("db_campus_alquiler");
db.reserva.find({ ID_Cliente: 1, Estado: "Pendiente" });

//!Mostrar los empleados con cargo de "Gerente" o "Asistente".
// use("db_campus_alquiler");
db.empleado.find({ Cargo: "Gerente" });

//!Obtener los datos de los clientes que realizaron al menos un alquiler
// use("db_campus_alquiler");
db.alquiler.aggregate([
  {
    $lookup: {
      from: "cliente",
      localField: "ID_Cliente",
      foreignField: "_id",
      as: "datos-cliente",
    },
  },
  {
    $unwind: "$datos-cliente",
  },
  {
    $project: {
      Fecha_Inicio: "$Fecha_Inicio",
      Fecha_Fin: "$Fecha_Fin",
      Estado: "$Estado",
      Cliente: "$datos-cliente",
    },
  },
]);

//!Listar todos los automóviles ordenados por marca y modelo
// use("db_campus_alquiler");
db.automovil.find().sort({ Marca: -1, Modelo: -1 });

//!Mostrar la cantidad total de automóviles en cada sucursal junto con su dirección.
// use("db_campus_alquiler");
db.sucursal_automovil.aggregate([
  {
    $group: {
      _id: "$ID_Sucursal",
      Cantidad_Total_Disponible: { $sum: "$Cantidad_Disponible" },
    },
  },
  {
    $lookup: {
      from: "sucursal",
      localField: "_id",
      foreignField: "_id",
      as: "sucursal_info",
    },
  },
  {
    $unwind: "$sucursal_info",
  },
  {
    $project: {
      _id: 0,
      Sucursal: "$sucursal_info.Nombre",
      Direccion: "$sucursal_info.Direccion",
      Cantidad_Total_Disponible: 1,
    },
  },
]);

//!Obtener la cantidad total de alquileres registrados en la base de datos.
// use("db_campus_alquiler");
db.alquiler.countDocuments();

//!Mostrar los automóviles con capacidad igual a 5 personas y que estén disponibles.
// use("db_campus_alquiler");
db.sucursal_automovil.aggregate([
  {
    $match: { Cantidad_Disponible: { $gt: 0 } }, // Filtrar solo los automóviles disponibles (Cantidad_Disponible > 0)
  },
  {
    $lookup: {
      from: "automovil",
      localField: "ID_Automovil",
      foreignField: "_id",
      as: "automovil",
    },
  },
  {
    $unwind: "$automovil",
  },
  {
    $match: { "automovil.Capacidad": 5 }, // Filtrar los automóviles con capacidad igual a 5
  },
  {
    $project: {
      _id: 0,
      Marca: "$automovil.Marca",
      Modelo: "$automovil.Modelo",
      Anio: "$automovil.Anio",
      Tipo: "$automovil.Tipo",
      Capacidad: "$automovil.Capacidad",
      Precio_diario: "$automovil.Precio_diario",
    },
  },
]);

//!Obtener los datos del cliente que realizó la reserva con ID_Reserva específico.
// use("db_campus_alquiler");
db.reserva.aggregate([
  {
    $match: { _id: 1 },
  },
  {
    $lookup: {
      from: "cliente",
      localField: "ID_Cliente",
      foreignField: "_id",
      as: "cliente_info",
    },
  },
  {
    $project: {
      Fecha_Inicio: "$Fecha_Inicio",
      Fecha_Fin: "$Fecha_Fin",
      Estado: "$Estado",
      Cliente: "$cliente_info",
    },
  },
]);

//!Listar los alquileres con fecha de inicio entre '2024-03-05' y '2024-03-20'
// use("db_campus_alquiler");
db.alquiler.find({
  Fecha_Inicio: {
    $gte: "2024-01-05",
    $lte: "2024-06-10",
  },
});
